This document describes how I plan to parse a markdown file to convert it to the mdoc format
/*
 * Basic markdown syntax.
 *
 *      # is a section
 *      *<word>* bold
 *      `<word>` italic
 *      [<token>] optional argument
 *
 *
 *  EXAMPLE markdown for this parser:
 * --->%
 *   .Dd January 8, 2024
 *   .Dt fhints user manual
 *   .Os
 *   .Au John Kaul
 *
 *   # NAME
 *   fhints -- create a hints file
 *
 *   # SYNOPSIS
 *   fhints [BFadf] [f hintsfile] file ...
 *
 *   # DESCRIPTION
 *   `fhints` makes a `hints` file from the specified C sources.  A `hints`
 *   file gives the function prototypes of functions found in source
 *   files.  Each line of the hints file contains a hint that can be
 *   displayed on Vim's status line.
 *
 *   By sourcing this `hints` file in Vim, indexed definitions
 *   (including `subroutines`, `typedefs`, `defines`, `structs`,
 *   `enums`, and `unions`) can be displayed on the status line when
 *   typing of the definition in the buffer.
 *
 *   # OPTIONS
 *   -a
 *       Append to *hints* file.
 *
 *   -B
 *       Use backward searching patterns (?...?).
 *
 *   -d
 *       Create hints for `#defines` that don't take arguments (ON
 *       by default); `#defines` that take arguments are tagged
 *       automatically.
 *  ...
 * --->%
 */
.
NOTES:
1. Store name so it can be recongnized and replaced with .Nd later.


test the first character in the string to see whether it is a newline to determine whether an empty line was read. and replace with .Pp


# =  .Sh <token>

/* In the case of this block:
 *  # NAME
 *  fhints -- create a hints file
 * ...
 */
if c == "NAME"
    next token = .Nm <token>
if c == "--"
    next token = .Nd <token>

/* In the case of this type of block
 *   # SYNOPSIS
 *   fhints [BFadf] [f hintsfile] *file* ...
 * ...
 */
if c == "SYNOPSIS"
    next token = .Nm <token>        /* name token */
if c == "[" {                       /* this begins optional argument flags */
    while (!whitespace) {
        next token = .Op FL <token>
    }
} else if token == " "  {           /* in the case of parsing "[f hintsfile]" or "file"; the `hintsfile` and `file` are just arguments.*/
        Ar <token>
}

if c = "..."
    replace with .Ar

/* So in the case of this type of block:
 *  # OPTIONS
 *  -a
 *      Append to the file.
 *  -B
 *      Use backward search.
 * ...
 */
if c == "-"
     next token = .It Fl <token>
     next line(s) should be a description indented 4 levels.

All other lines read them as they are (remove leading whitepspace).


